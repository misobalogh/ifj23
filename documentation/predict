
FOLLOW(return_type)     = { "{" }
FOLLOW(type)            = { "{" }
FOLLOW(condition)       = { "{" }
FOLLOW(expression)      = { "{", EOL } 
FOLLOW(statement)       = { EOL }
FOLLOW(func_stat)       = { EOL }
FOLLOW(var_assigment)   = { EOL }
FOLLOW(function)        = { EOL }
FOLLOW(val_assigment)   = { EOL }
FOLLOW(ret_value)       = { EOL }
FOLLOW(return_stat)     = { EOL }
FOLLOW(func_stat_list)  = { EOL, "}" }
FOLLOW(stat_list)       = { EOL, "}", EOF }
FOLLOW(type)            = { EOL , "," , ")", "=" }
FOLLOW(var_definition)  = { ":", "=" }
FOLLOW(param_list)      = { ")" }
FOLLOW(param_next)      = { ")" }
FOLLOW(param)           = { ")", "," }
FOLLOW(with_name)       = { "," , id, const }
FOLLOW(id_or_const)     = { "," , id, const }
FOLLOW(input_param)     = { "," , id, const }
FOLLOW(input_param_list)= { ")" }
FOLLOW(input_param_next)= { ")" }



EMPTY(return_type) 
EMPTY(func_stat_list) 
EMPTY(func_stat) 
EMPTY(return_stat) 
EMPTY(ret_value) 
EMPTY(param_list) 
EMPTY(param_next) 
EMPTY(stat_list) 
EMPTY(statement) 
EMPTY(val_assigment) 
EMPTY(input_param_list) 
EMPTY(input_param_next) 
EMPTY(with_name) 


FIRST(program)        = { let, var, id, func, if, while, EOL, EOF }
FIRST(stat_list)      = { let, var, id, func, if, while, EOL }
FIRST(statement)      = { let, var, id, func, if, while }
FIRST(let_or_var)     = { let, var}
FIRST(var_assigment)  = { "=", ":"}
FIRST(val_assigment)  = { "="}
FIRST(fn_or_exp)      = { Operator, "(" } // SECOND(expression)
FIRST(after_id)       = { "=", "(" }
FIRST(input_param_list) = { id, const }
FIRST(input_param_next) = { ","}
FIRST(input_param)    = { id, const }
FIRST(with_name)      = { ":" }
FIRST(id_or_const)    = { id, const }
FIRST(param_list)     = { id }
FIRST(param)          = { id }
FIRST(param_next)     = { "," }
FIRST(return_type)    = {->}
FIRST(func_stat_list) = { let, var, id, return, if, while, EOL }
FIRST(func_stat)      = { let, var, id, return, if, while }
FIRST(return_stat)    = { return }
FIRST(ret_value)      = { id, const, "(" }
FIRST(condition)      = { id, const, "(", let}
FIRST(expression)     = { id, const, "("}

program
PREDICT(1) = let, var, id, func, if, while, EOL, EOF

stat_list
PREDICT(2) = let, var, id, func, if, while
PREDICT(3) = EOL, "}", EOF

statement
PREDICT(4) = let, var
PREDICT(5) = id
PREDICT(6) = func
PREDICT(7) = if
PREDICT(8) = while
PREDICT(9) = EOL

let_or_var
PREDICT(10) = let
PREDICT(11) = var

var_assigment
PREDICT(12) = ":"
PREDICT(13) = "="

val_assigment
PREDICT(14) = "="
PREDICT(15) = EOL

fn_or_exp
PREDICT(16) = Operator
PREDICT(17) = "("

after_id
PREDICT(18) = "="
PREDICT(19) = "("

input_param_list
PREDICT(20) = id, const
PREDICT(21) = ")"

input_param_next
PREDICT(22) = ","
PREDICT(23) = ")"

input_param
PREDICT(24) = id
PREDICT(25) = const

with_name
PREDICT(26) = ":"
PREDICT(27) = "," , id, const

id_or_const
PREDICT(28) = id
PREDICT(29) = const

param_list
PREDICT(30) = id
PREDICT(31) = ")"

param
PREDICT(32) = id

param_next
PREDICT(33) = ","
PREDICT(34) = ")"

return_type
PREDICT(35) = "->"
PREDICT(36) = "{" 

func_stat_list
PREDICT(37) = let, var, id, return, if, while
PREDICT(38) = EOL, "}"

func_stat
PREDICT(39) = let, var
PREDICT(40) = id
PREDICT(41) = return
PREDICT(42) = if
PREDICT(43) = while
PREDICT(44) = EOL

return_stat
PREDICT(45) = ")"
PREDICT(46) = EOL

ret_val
PREDICT(47) = id, const, "("
PREDICT(48) = EOL

condition
PREDICT(49) = id, const, "("
PREDICT(50) = let

