

<program> -> <stat_list> EOF

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> let id

<var_assignment> -> = const <expression>

<expression> => switching to precedence parser

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> var id

<var_assignment> -> = const <expression>

<expression> => switching to precedence parser

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> var id

<var_assignment> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> let id

<var_assignment> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> EPSILON

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> id <after_id>

<after_id> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> id <after_id>

<after_id> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> EPSILON

EOF



<program> -> <stat_list> EOF

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> let id

<var_assignment> -> = const <expression>

<expression> => switching to precedence parser

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> <let_or_var> <var_assignment>

<let_or_var> -> var id

<var_assignment> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> id <after_id>

<after_id> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOL

<stat_list> -> <statement> EOL <stat_list>

<statement> -> id <after_id>

<after_id> -> = id <fn_or_exp>

<fn_or_exp> -> id/const

statement OK
EOF



<program> -> <stat_list> EOF

EOF

